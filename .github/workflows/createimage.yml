name: image creator CI

on: [ pull_request ]

jobs:
  build:
    name: Create a machine image
    runs-on: ubuntu-latest
    env:
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      SQL_URI: ${{ secrets.SQL_URI }}
      DATABASE: ${{ secrets.DATABASE }}
      NODE_ENV: ${{ secrets.NODE_ENV }}
      PKR_VAR_DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      PKR_VAR_DB_USER: ${{ secrets.DB_USER }}
      TOPIC: ${{ secrets.TOPIC }}
      DOMAIN: ${{ secrets.DOMAIN }}
      EXPIRY: ${{ secrets.EXPIRY}}

    steps:

      - name: Checkout code
        uses: actions/checkout@v2

      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
          create_credentials_file: true
          export_environment_variables: true

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: 'Use gcloud CLI'
        run: 'gcloud info'

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      - name: Add an .env file
        run: |
          touch .env
          echo "PORT=${{ secrets.PORT }}" >> .env
          echo "NODE_ENV=production" >> .env
          echo "TOPIC=${{ secrets.TOPIC }}" >> .env
          echo "DOMAIN=${{ secrets.DOMAIN }}" >> .env
          echo "EXPIRY=${{ secrets.EXPIRY}}" >> .env
                
      - name: Zip the application
        run: |
          zip -r webapp.zip ./
      
      - name: Install npm dependencies
        run: npm install

      - name: Install MySQL
        run: |
          sudo apt-get update
          sudo apt-get install mysql-server
          sudo /etc/init.d/mysql start
          mysql -e "CREATE DATABASE IF NOT EXISTS $DATABASE;" -u$DB_USER -p$DB_PASSWORD

      - name: Enable MySQL service
        run: sudo systemctl enable mysql

      - name: Check MySQL service status
        run: sudo systemctl status mysql

      - name: Run Integration Tests
        run: npm run test:integration      

      - name: Setting up Packer
        run: |
          wget https://releases.hashicorp.com/packer/1.7.3/packer_1.7.3_linux_amd64.zip
          unzip -o packer_1.7.3_linux_amd64.zip
          chmod +x packer
          sudo mv packer /usr/local/bin/

      - name: Initializing Packer
        run: packer init ./packerconfig/main.pkr.hcl

      - name: Building the Image
        run: packer build -var 'project_id=${{ secrets.PROJECT_ID }}' -var 'zone=${{ secrets.ZONE }}' ./packerconfig/main.pkr.hcl      

      - name: Fetch the Image Name
        run: |          
          MY_MI=$(jq -r '.builds[0].artifact_id' image_manifest.json)
          echo "MY_MI=$MY_MI" >> $GITHUB_ENV

      - name: 'Generate Template Name with Timestamp'
        id: generate-timestamp
        run: |
          echo "TNAME=csye6225-vm-$(date +%Y-%m-%d-%H-%M-%S)" >> $GITHUB_ENV
      
      - name: 'Create an Instance Template'
        run: |
          gcloud compute instance-templates create $TNAME \
            --boot-disk-kms-key projects/cloud-assigment-4/locations/us-east1/keyRings/my-key-ring/cryptoKeys/vm-crypto-key \
            --machine-type=${{ env.MYMACHINE_TYPE }} \
            --tags=${{ env.MYTAGS }} \
            --image=${{ env.MY_MI }} \
            --region=${{ env.MY_REGION }} \
            --instance-template-region=${{ env.MY_REGION }} \
            --boot-disk-size=${{ env.MYBOOT_DISK_SIZE }} \
            --boot-disk-type=${{ env.MYBOOT_DISK_TYPE }} \
            --network-interface="network=${{ env.MYNETWORK }},subnet=${{ env.MYSUBNET }},network-tier=${{ env.MYNETWORK_TIER }}" \
            --service-account=${{ env.MYSA }} \
            --scopes=${{ env.MYSCOPES }} \
            --metadata=startup-script=$'#!/bin/bash\n# Check if SQL_URI key exists in the .env file\nif grep -q "^SQL_URI=" "/home/csye6225/webapp/.env"; then\n    echo "SQL_URI key already exists in the .env file."\nelse\n    echo "Adding SQL_URI to the .env file."\n    echo "SQL_URI=mysql://${{ env.MYPROD_DB_USER }}:${{ env.MYPROD_DB_PASSWORD }}@${{ env.MYPROD_DB_HOST }}:${{ env.MYPROD_DB_PORT }}/" | sudo tee -a "/home/csye6225/webapp/.env" > /dev/null\n    echo "DATABASE=${{ env.MYPROD_DB_NAME }}" | sudo tee -a "/home/csye6225/webapp/.env" > /dev/null\n    # Only create the .env_ready file if SQL_URI is added\n    touch "/tmp/.env_ready"\n    echo ".env_ready file created in /tmp."\nfi'
        env:
              MYMACHINE_TYPE: ${{ secrets.MACHINE_TYPE }}
              MYTAGS: ${{ secrets.TAGS }}
              MYBOOT_DISK_SIZE: ${{ secrets.BOOT_DISK_SIZE }}
              MYBOOT_DISK_TYPE: ${{ secrets.BOOT_DISK_TYPE }}
              MYNETWORK: ${{ secrets.NETWORK }}
              MYSUBNET: ${{ secrets.SUBNET }}
              MYNETWORK_TIER: ${{ secrets.NETWORK_TIER }}
              MYSA: ${{ secrets.SERVICE_ACCOUNT }}
              MYSCOPES: ${{ secrets.SCOPES }}
              MYPROD_DB_USER: ${{ secrets.PROD_DB_USER }}
              MYPROD_DB_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
              MYPROD_DB_HOST: ${{ secrets.PROD_DB_HOST }}
              MYPROD_DB_PORT: ${{ secrets.PROD_DB_PORT }}
              MYPROD_DB_NAME: ${{ secrets.PROD_DB_NAME }}
              MY_REGION: ${{ secrets.REGION }}  

      - name: 'Configure MIG to use new template'
        run: |
          gcloud compute instance-groups managed set-instance-template \
           ${{ env.MYMIG_NAME }} \
            --template=projects/${{ env.GCLOUD_PROJECT }}/regions/${{ env.MY_REGION }}/instanceTemplates/${{ env.TNAME }} \
            --region=${{ env.MY_REGION }}
        env:
            MY_REGION: ${{ secrets.REGION }}  
            MYMIG_NAME: ${{ secrets.MIG_NAME }}  

      - name: 'Start rolling update'
        run: |
          gcloud compute instance-groups managed rolling-action start-update ${{ env.MYMIG_NAME }} \
            --version=template=projects/${{ env.GCLOUD_PROJECT }}/regions/${{ env.MY_REGION }}/instanceTemplates/${{ env.TNAME }} \
            --region=${{ env.MY_REGION }} \
            --type=proactive
        env:
            MY_REGION: ${{ secrets.REGION }}  
            MYMIG_NAME: ${{ secrets.MIG_NAME }}  

      - name: 'Check rolling update'
        run: |
          gcloud compute instance-groups managed wait-until ${{ env.MYMIG_NAME }} \
          --version-target-reached \
            --region=${{ env.MY_REGION }}
        env:
            MY_REGION: ${{ secrets.REGION }}  
            MYMIG_NAME: ${{ secrets.MIG_NAME }}  
