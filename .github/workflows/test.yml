name: instance template creator CI

on: [pull_request]

jobs:
  build:
    name: Create a machine image
    runs-on: ubuntu-latest
    env: # Define environment variables for the entire job
      MACHINE_TYPE: e2-medium
      TAGS: webapp
      IMAGE: csye6225-2024-04-03-14-05-03
      BOOT_DISK_SIZE: 100GB
      BOOT_DISK_TYPE: pd-balanced
      NETWORK: cloud-vpc
      SUBNET: webapp
      NETWORK_TIER: PREMIUM
      SERVICE_ACCOUNT: webapp-service-account@cloud-assigment-4.iam.gserviceaccount.com
      SCOPES: "https://www.googleapis.com/auth/cloud-platform"
      DB_USER: webapp
      DB_PASSWORD: hcK446dmHNmdQuNM
      DB_HOST: 10.12.0.4
      DB_PORT: 3306
      DB_NAME: webapp
      REGION: us-east1
      MIG_NAME: appserver-igm-2

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
          create_credentials_file: true
          export_environment_variables: true

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: 'Use gcloud CLI'
        run: 'gcloud info'
        
      - name: 'Generate Template Name with Timestamp'
        id: generate-timestamp
        run: |
          echo "TEMPLATE_NAME=csye6225-vm-$(date +%Y-%m-%d-%H-%M-%S)" >> $GITHUB_ENV

      - name: 'create instance template'
        run: |
          gcloud compute instance-templates create $TEMPLATE_NAME \
            --machine-type=${{ env.MACHINE_TYPE }} \
            --tags=${{ env.TAGS }} \
            --image=${{ env.IMAGE }} \
            --region=${{ env.REGION }} \
            --instance-template-region=${{ env.REGION }} \
            --boot-disk-size=${{ env.BOOT_DISK_SIZE }} \
            --boot-disk-type=${{ env.BOOT_DISK_TYPE }} \
            --network-interface="network=${{ env.NETWORK }},subnet=${{ env.SUBNET }},network-tier=${{ env.NETWORK_TIER }}" \
            --service-account=${{ env.SERVICE_ACCOUNT }} \
            --scopes=${{ env.SCOPES }} \
            --metadata=startup-script=$'#!/bin/bash\n# Check if SQL_URI key exists in the .env file\nif grep -q "^SQL_URI=" "/home/csye6225/webapp/.env"; then\n    echo "SQL_URI key already exists in the .env file."\nelse\n    echo "Adding SQL_URI to the .env file."\n    echo "SQL_URI=mysql://${{ env.DB_USER }}:${{ env.DB_PASSWORD }}@${{ env.DB_HOST }}:${{ env.DB_PORT }}/" | sudo tee -a "/home/csye6225/webapp/.env" > /dev/null\n    echo "DATABASE=${{ env.DB_NAME }}" | sudo tee -a "/home/csye6225/webapp/.env" > /dev/null\n    # Only create the .env_ready file if SQL_URI is added\n    touch "/tmp/.env_ready"\n    echo ".env_ready file created in /tmp."\nfi'
            --boot-disk-kms-key projects/cloud-assigment-4/locations/us-east1/keyRings/my-key-ring/cryptoKeys/vm-crypto-key

      - name: 'Configure MIG to use new template'
        run: |
          gcloud compute instance-groups managed set-instance-template \
           ${{ env.MIG_NAME }} \
            --template=projects/${{ env.GCLOUD_PROJECT }}/regions/${{ env.REGION }}/instanceTemplates/${{ env.TEMPLATE_NAME }} \
            --region=${{ env.REGION }}

      - name: 'Start rolling update'
        run: |
          gcloud compute instance-groups managed rolling-action start-update ${{ env.MIG_NAME }} \
            --version=template=projects/${{ env.GCLOUD_PROJECT }}/regions/${{ env.REGION }}/instanceTemplates/${{ env.TEMPLATE_NAME }} \
            --region=${{ env.REGION }} \
            --type=proactive

      - name: 'Check rolling update'
        run: |
          gcloud compute instance-groups managed wait-until ${{ env.MIG_NAME }} \
          --version-target-reached \
            --region=${{ env.REGION }}